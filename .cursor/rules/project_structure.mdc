---
alwaysApply: true
---

# MPT_Back 프로젝트 구조

이 프로젝트는 현대 포트폴리오 이론(MPT)에 기반한 포트폴리오 최적화 및 백테스팅을 위해 설계되었습니다.

## 핵심 모듈

- **설정 (`Configuration`)**: [Source/config.py](mdc:Source/config.py)는 중앙 제어판입니다. 모든 파라미터, 전략, 설정이 여기에 정의됩니다.
- **데이터 관리 (`Data Management`)**: [Source/data_manager.py](mdc:Source/data_manager.py)는 `yfinance`를 통해 금융 데이터를 가져오는 역할을 합니다.
- **최적화 엔진 (`Optimization Engine`)**: [Source/portfolio_optimizer.py](mdc:Source/portfolio_optimizer.py)는 포트폴리오 지표 계산 및 다양한 최적화 전략(예: 최대 샤프, 최소 변동성)을 실행하는 핵심 로직을 포함합니다.
- **백테스팅 엔진 (`Backtesting Engine`)**: [Source/backtester.py](mdc:Source/backtester.py)는 리밸런싱과 슬리피지를 고려하여 시간 경과에 따른 전략 성과를 시뮬레이션하는 동적 롤링 윈도우 백테스트를 수행합니다.
- **시각화 (`Visualization`)**: [Source/visualizer.py](mdc:Source/visualizer.py)는 성과 그래프와 효율적 투자선을 그리는 역할을 합니다.
- **유틸리티 (`Utilities`)**: [Source/utils.py](mdc:Source/utils.py)는 프로젝트 전반에서 사용되는 헬퍼 함수를 포함합니다.

## 환경 설정

스크립트를 실행하기 전에, 프로젝트 루트 디렉터리에서 다음 명령어를 사용하여 가상환경을 활성화해야 합니다.

```bash
source venv/bin/activate
```

## 주요 실행 파일

이 프로젝트에는 한 가지 주요 분석 흐름이 있습니다.

1.  **동적 백테스팅**: 전체 백테스트 시뮬레이션을 실행하려면 [Source/run_dynamic_backtesting.py](mdc:Source/run_dynamic_backtesting.py) 스크립트를 실행합니다. 이 스크립트는 핵심 모듈을 사용하여 `config.py`에 정의된 전략에 따라 포트폴리오 성과를 시뮬레이션하고 성과 보고서와 그래프를 생성합니다. 이 스크립트의 원본 노트북은 [Source/1_run_optimization.ipynb](mdc:Source/1_run_optimization.ipynb)입니다.
# MPT_Back 프로젝트 구조

이 프로젝트는 현대 포트폴리오 이론(MPT)에 기반한 포트폴리오 최적화 및 백테스팅을 위해 설계되었습니다.

## 핵심 모듈

- **설정 (`Configuration`)**: [Source/config.py](mdc:Source/config.py)는 중앙 제어판입니다. 모든 파라미터, 전략, 설정이 여기에 정의됩니다.
- **데이터 관리 (`Data Management`)**: [Source/data_manager.py](mdc:Source/data_manager.py)는 `yfinance`를 통해 금융 데이터를 가져오는 역할을 합니다.
- **최적화 엔진 (`Optimization Engine`)**: [Source/portfolio_optimizer.py](mdc:Source/portfolio_optimizer.py)는 포트폴리오 지표 계산 및 다양한 최적화 전략(예: 최대 샤프, 최소 변동성)을 실행하는 핵심 로직을 포함합니다.
- **백테스팅 엔진 (`Backtesting Engine`)**: [Source/backtester.py](mdc:Source/backtester.py)는 리밸런싱과 슬리피지를 고려하여 시간 경과에 따른 전략 성과를 시뮬레이션하는 동적 롤링 윈도우 백테스트를 수행합니다.
- **시각화 (`Visualization`)**: [Source/visualizer.py](mdc:Source/visualizer.py)는 성과 그래프와 효율적 투자선을 그리는 역할을 합니다.
- **유틸리티 (`Utilities`)**: [Source/utils.py](mdc:Source/utils.py)는 프로젝트 전반에서 사용되는 헬퍼 함수를 포함합니다.

## 환경 설정

스크립트를 실행하기 전에, 프로젝트 루트 디렉터리에서 다음 명령어를 사용하여 가상환경을 활성화해야 합니다.

```bash
source venv/bin/activate
```

## 주요 실행 파일

이 프로젝트에는 한 가지 주요 분석 흐름이 있습니다.

1.  **동적 백테스팅**: 전체 백테스트 시뮬레이션을 실행하려면 [Source/run_dynamic_backtesting.py](mdc:Source/run_dynamic_backtesting.py) 스크립트를 실행합니다. 이 스크립트는 핵심 모듈을 사용하여 `config.py`에 정의된 전략에 따라 포트폴리오 성과를 시뮬레이션하고 성과 보고서와 그래프를 생성합니다. 이 스크립트의 원본 노트북은 [Source/1_run_optimization.ipynb](mdc:Source/1_run_optimization.ipynb)입니다.
